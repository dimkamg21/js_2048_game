{"version":3,"sources":["scripts/main.js"],"names":["buttonToPlay","document","querySelector","startMessage","winMessage","loseMessage","scoreCounter","tableRows","rows","fieldCells","querySelectorAll","matrix","createMatrix","score","gameResult","iterateMatrix","element","parseInt","innerHTML","classList","remove","gameLost","rowIndex","colIndex","array","i","length","push","spawnStartNumber","spawnNewNumber","paintCell","checkForEmpty","randomValue","Math","random","row","floor","col","updateGame","cellValue","compareCells","element1","element2","num","restoreCell","arrElement","callback","j","updateCell","cell","innerText","value","add","toString","r","c","cells","callMove","addEventListener","e","key","moveUp","moveDown","moveRight","moveLeft","pastValues","createMatrixValueCopy","merged","k","isChanged","matrixA","matrixB","matrixValueCopy","Array","fill","map","check","copyMatrixValue","newValues","contains"],"mappings":"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","file":"main.7003f485.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst buttonToPlay = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst scoreCounter = document.querySelector('.game-score');\n\nconst tableRows = document.querySelector('tbody').rows;\n\nconst fieldCells = document.querySelectorAll('td');\n\nconst matrix = createMatrix();\nlet score = 0;\n\nbuttonToPlay.addEventListener('click', () => {\n  startMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n\n  score = 0;\n\n  if (buttonToPlay.classList.contains('start')) {\n    spawnStartNumber();\n    buttonToPlay.classList.remove('start');\n    buttonToPlay.classList.add('restart');\n    buttonToPlay.innerHTML = 'Restart';\n  }\n\n  if (buttonToPlay.classList.contains('restart')) {\n    iterateMatrix(element => restoreCell(element));\n    spawnStartNumber();\n  }\n});\n\ncallMove();\n\nfunction gameResult() {\n  iterateMatrix((element) => {\n    if (parseInt(element.innerHTML) === 2048) {\n      winMessage.classList.remove('hidden');\n    }\n  });\n\n  if (!gameLost()) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction createMatrix() {\n  let rowIndex = 0;\n  let colIndex = 0;\n\n  const cols = 4;\n  const array = [];\n\n  for (let i = 0; i < fieldCells.length; i++) {\n    if (!array[rowIndex]) {\n      array[rowIndex] = [];\n    }\n\n    array[rowIndex].push(fieldCells[i]);\n\n    colIndex++;\n\n    if (colIndex === cols) {\n      rowIndex++;\n      colIndex = 0;\n    }\n  }\n\n  return array;\n}\n\nfunction spawnStartNumber() {\n  for (let i = 0; i < 2; i++) {\n    spawnNewNumber(2);\n  }\n\n  paintCell();\n}\n\nfunction spawnNewNumber() {\n  if (!checkForEmpty()) {\n    return;\n  }\n\n  const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n  while (true) {\n    const row = Math.floor(Math.random() * 4);\n    const col = Math.floor(Math.random() * 4);\n\n    if (matrix[row][col].innerHTML === '') {\n      matrix[row][col].innerHTML = randomValue;\n      break;\n    }\n\n    updateGame();\n  }\n}\n\nfunction paintCell() {\n  iterateMatrix((element) => {\n    const cellValue = element.innerHTML;\n\n    if (cellValue !== '') {\n      element.classList = `field-cell field-cell--${cellValue}`;\n    } else {\n      element.classList = 'field-cell';\n    }\n  });\n}\n\nfunction compareCells(element1, element2) {\n  for (let num = 2; num <= 2048; num *= 2) {\n    if (parseInt(element1.innerHTML) === num\n    && parseInt(element2.innerHTML) === num) {\n      return true;\n    }\n  }\n}\n\nfunction restoreCell(arrElement) {\n  arrElement.innerHTML = '';\n  arrElement.classList.remove(`field-cell--${arrElement.innerHTML}`);\n}\n\nfunction iterateMatrix(callback) {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      callback(matrix[i][j]);\n    }\n  }\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = num.toString();\n    cell.classList.add(`field-cell--${num.toString()}`);\n  }\n}\n\nfunction updateGame() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      const currentCell = tableRows[r].cells[c];\n      const num = parseInt(matrix[r][c].innerHTML);\n\n      updateCell(currentCell, num);\n    }\n  }\n\n  scoreCounter.innerText = score.toString();\n}\n\nfunction callMove() {\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'ArrowUp') {\n      moveUp();\n    }\n\n    if (e.key === 'ArrowDown') {\n      moveDown();\n    }\n\n    if (e.key === 'ArrowRight') {\n      moveRight();\n    }\n\n    if (e.key === 'ArrowLeft') {\n      moveLeft();\n    }\n\n    gameResult();\n\n    scoreCounter.innerText = score.toString();\n\n    paintCell();\n  });\n}\n\nfunction moveRight() {\n  const pastValues = createMatrixValueCopy();\n\n  for (let i = 0; i < matrix.length; i++) {\n    let merged = false;\n\n    for (let j = matrix[i].length - 2; j >= 0; j--) {\n      if (matrix[i][j].innerHTML !== '') {\n        let k = j + 1;\n\n        while (k < matrix[i].length && matrix[i][k].innerHTML === '') {\n          matrix[i][k].innerHTML = matrix[i][k - 1].innerHTML;\n          restoreCell(matrix[i][k - 1]);\n          k++;\n        }\n\n        while (k < matrix[i].length) {\n          if (!merged && compareCells(matrix[i][k], matrix[i][k - 1])) {\n            matrix[i][k].innerHTML = `${parseInt(matrix[i][k].innerHTML) * 2}`;\n            matrix[i][k - 1].innerHTML = '';\n            restoreCell(matrix[i][k - 1]);\n\n            score += parseInt(matrix[i][k].innerHTML);\n\n            // Встановлюємо прапорець \"merged\" на t\n            merged = true;\n          } else {\n            merged = false; // Скидаємо прапорець, якщо злиття не відбулось\n          }\n          k++;\n        }\n      }\n    }\n  }\n\n  const newValues = createMatrixValueCopy();\n\n  if (isChanged(pastValues, newValues)) {\n    spawnNewNumber();\n  }\n\n  updateGame();\n}\n\nfunction moveLeft() {\n  const pastValues = createMatrixValueCopy();\n\n  for (let i = 0; i < matrix.length; i++) {\n    let merged = false;\n\n    for (let j = 1; j < matrix[i].length; j++) {\n      if (matrix[i][j].innerHTML !== '') {\n        let k = j - 1;\n\n        while (k >= 0 && matrix[i][k].innerHTML === '') {\n          matrix[i][k].innerHTML = matrix[i][k + 1].innerHTML;\n          restoreCell(matrix[i][k + 1]);\n          k--;\n        }\n\n        while (k >= 0) {\n          if (!merged && compareCells(matrix[i][k], matrix[i][k + 1])) {\n            matrix[i][k].innerHTML = `${parseInt(matrix[i][k].innerHTML) * 2}`;\n            matrix[i][k + 1].innerHTML = '';\n            restoreCell(matrix[i][k + 1]);\n\n            score += parseInt(matrix[i][k].innerHTML);\n\n            // Встановлюємо прапорець \"merged\" на true\n            merged = true;\n          } else {\n            merged = false; // Скидаємо прапорець, якщо злиття не відбулось\n          }\n          k--;\n        }\n      }\n    }\n  }\n\n  const newValues = createMatrixValueCopy();\n\n  if (isChanged(pastValues, newValues)) {\n    spawnNewNumber();\n  }\n\n  updateGame();\n}\n\nfunction moveUp() {\n  const pastValues = createMatrixValueCopy();\n\n  for (let j = 0; j < matrix[0].length; j++) {\n    let merged = false;\n\n    for (let i = 1; i < matrix.length; i++) {\n      if (matrix[i][j].innerHTML !== '') {\n        let k = i - 1;\n\n        while (k >= 0 && matrix[k][j].innerHTML === '') {\n          matrix[k][j].innerHTML = matrix[k + 1][j].innerHTML;\n          restoreCell(matrix[k + 1][j]);\n          k--;\n        }\n\n        while (k >= 0) {\n          if (!merged && compareCells(matrix[k][j], matrix[k + 1][j])) {\n            matrix[k][j].innerHTML = `${parseInt(matrix[k][j].innerHTML) * 2}`;\n            matrix[k + 1][j].innerHTML = '';\n            restoreCell(matrix[k + 1][j]);\n\n            score += parseInt(matrix[k][j].innerHTML);\n\n            // Встановлюємо прапорець \"merged\" на true\n            merged = true;\n          } else {\n            merged = false; // Скидаємо прапорець, якщо злиття не відбулось\n          }\n          k--;\n        }\n      }\n    }\n  }\n\n  const newValues = createMatrixValueCopy();\n\n  if (isChanged(pastValues, newValues)) {\n    spawnNewNumber();\n  }\n\n  updateGame();\n}\n\nfunction moveDown() {\n  const pastValues = createMatrixValueCopy();\n\n  for (let j = 0; j < matrix[0].length; j++) {\n    let merged = false;\n\n    for (let i = matrix.length - 2; i >= 0; i--) {\n      if (matrix[i][j].innerHTML !== '') {\n        let k = i + 1;\n\n        while (k < matrix.length && matrix[k][j].innerHTML === '') {\n          matrix[k][j].innerHTML = matrix[k - 1][j].innerHTML;\n          restoreCell(matrix[k - 1][j]);\n          k++;\n        }\n\n        while (k < matrix.length) {\n          if (!merged && compareCells(matrix[k][j], matrix[k - 1][j])) {\n            matrix[k][j].innerHTML = `${parseInt(matrix[k][j].innerHTML) * 2}`;\n            matrix[k - 1][j].innerHTML = '';\n            restoreCell(matrix[k - 1][j]);\n\n            score += parseInt(matrix[k][j].innerHTML);\n\n            // Встановлюємо прапорець \"merged\" на true\n            merged = true;\n          } else {\n            merged = false; // Скидаємо прапорець, якщо злиття не відбулось\n          }\n          k++;\n        }\n      }\n    }\n  }\n\n  const newValues = createMatrixValueCopy();\n\n  if (isChanged(pastValues, newValues)) {\n    spawnNewNumber();\n  }\n\n  updateGame();\n}\n\nfunction isChanged(matrixA, matrixB) {\n  for (let i = 0; i < matrixA.length; i++) {\n    for (let j = 0; j < matrixA[i].length; j++) {\n      if (matrixA[i][j] !== matrixB[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction createMatrixValueCopy() {\n  const matrixValueCopy\n  = Array(matrix.length).fill(null).map(() => Array(matrix[0].length));\n\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      matrixValueCopy[i][j] = matrix[i][j].innerHTML;\n    }\n  }\n\n  return matrixValueCopy;\n}\n\nfunction gameLost() {\n  let check = false;\n  const copyMatrixValue = createMatrixValueCopy();\n\n  for (let r = 0; r < 3; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (copyMatrixValue[r][c] === copyMatrixValue[r + 1][c]\n        || copyMatrixValue[r][c] === copyMatrixValue[r][c + 1]) {\n        check = true;\n      }\n    }\n  }\n\n  if (!check && !checkForEmpty()) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkForEmpty() {\n  const newValues = createMatrixValueCopy();\n\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (newValues[r][c] === '') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}